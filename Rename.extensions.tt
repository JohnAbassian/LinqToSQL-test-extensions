<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#
var dbmlFileName = Path.GetFileName(Host.TemplateFile).Replace(".extensions.tt", String.Empty) + ".dbml";
var dbmlDir = Path.GetDirectoryName(Host.TemplateFile);
var dbmlPath = Path.Combine(dbmlDir, dbmlFileName);

// work out the namespace
IServiceProvider serviceProvider = (IServiceProvider)Host;
DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
ProjectItem templateItem = dte.Solution.FindProjectItem(Host.TemplateFile);

var proj = templateItem.ContainingProject;
var baseNs = proj.Properties.Item("DefaultNamespace").Value;
var projDir = Path.GetDirectoryName(proj.FullName);
string relDir = dbmlDir.Substring(projDir.Length).Trim('\\');
var ns = baseNs;
foreach(var part in relDir.Split('\\')) {
	ns += "." + part;
}

var xml = XDocument.Load(dbmlPath);
XNamespace xns = "http://schemas.microsoft.com/linqtosql/dbml/2007";

XElement dbEl = xml.Document.Root;

var className = dbEl.Attribute("Class").Value;
var iface = "I" + className;
#>
using Mocking;
using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace <#= ns #> {
	#region <#= iface #>
	public interface <#= iface #> : IDisposable {
		void Refresh(RefreshMode mode, Object entity);

		<# foreach(XElement table in dbEl.Elements(xns + "Table")) { #>
		
		ITable<<#= table.Element(xns + "Type").Attribute("Name").Value #>> <#= table.Attribute("Member").Value #> { get; }
		<# } #>

		ITable<TEntity> GetTable<TEntity>() where TEntity: class;

		void SubmitChanges();
	}
	#endregion

	#region Partial class extensions to <#= className #>
	public partial class <#= className #> : <#= iface #> {
		<# foreach(XElement table in dbEl.Elements(xns + "Table")) { #>
		
		ITable<<#= table.Element(xns + "Type").Attribute("Name").Value #>> <#= iface #>.<#= table.Attribute("Member").Value #> => this.<#= table.Attribute("Member").Value #>; 
		<# } #>

		ITable<TEntity> <#= iface #>.GetTable<TEntity>() => this.GetTable<TEntity>();
		
	}
	#endregion
	
	#region In-memory version of <#= iface #>
	public class Memory<#= className #> : IMockDataContext, <#= iface #> {

		private readonly Dictionary<Type, ITable> _tables = new Dictionary<Type, ITable>();
		private static readonly MappingSource mappingSource = new AttributeMappingSource();

		<# foreach(XElement table in dbEl.Elements(xns + "Table")) { #>
		public ITable<<#= table.Element(xns + "Type").Attribute("Name").Value #>> <#= table.Attribute("Member").Value #> => GetTable<<#= table.Element(xns + "Type").Attribute("Name").Value #>>(); 
		<# } #>

		public ITable GetTable(Type type) {
			if(!_tables.TryGetValue(type, out ITable table)) {
				Type tableType = typeof(MemoryTable<>).MakeGenericType(type);

				table = Activator.CreateInstance(tableType, this) as ITable;
				_tables.Add(type, table);
			}
			return table;
		}

		public ITable<TEntity> GetTable<TEntity>() where TEntity : class {
			Type type = typeof(TEntity);

			if(!_tables.TryGetValue(type, out ITable table)) {
				table = (ITable)new MemoryTable<TEntity>(this);
				_tables.Add(type, table);
			}

			return (ITable<TEntity>)table;
		}


		public void SubmitChanges() {
			foreach(ITable table in _tables.Values) {
				((IMockTable)table).SubmitChanges();
			}
		}

		public MetaModel Mapping => mappingSource.GetModel(typeof(<#= iface #>));

		public void Dispose() {
            Dispose(true);
            GC.SuppressFinalize(this);
		}

        protected virtual void Dispose(Boolean disposing) {
        }
	}
	#endregion
}